#include "recompiler.h"
#include <iostream>
#include <vector>
#include <fstream>

int main(int argc, char* argv[]) {
    // --- File loading and Capstone setup ---
    if (argc != 2) {
        std::cerr << "Usage: " << argv[0] << " <path_to_game_binary>" << std::endl;
        return 1;
    }
    const std::string file_path = argv[1];
    std::ifstream game_file(file_path, std::ios::binary);
    if (!game_file) {
        std::cerr << "Error: Could not open file " << file_path << std::endl;
        return 1;
    }
    game_file.seekg(0, std::ios::end);
    size_t file_size = game_file.tellg();
    game_file.seekg(0, std::ios::beg);
    std::vector<uint8_t> file_buffer(file_size);
    game_file.read(reinterpret_cast<char*>(file_buffer.data()), file_size);
    
    csh handle;
    cs_insn *insn;
    size_t count;
    if (cs_open(CS_ARCH_MIPS, (cs_mode)(CS_MODE_MIPS64 | CS_MODE_LITTLE_ENDIAN), &handle) != CS_ERR_OK) {
        std::cerr << "ERROR: Failed to initialize Capstone" << std::endl;
        return -1;
    }
    cs_option(handle, CS_OPT_DETAIL, CS_OPT_ON);
    count = cs_disasm(handle, file_buffer.data(), file_buffer.size(), 0x00100000, 0, &insn);

    // --- New Architecture Starts Here ---
    if (count > 0) {
        std::cout << "// Successfully disassembled " << count << " instructions." << std::endl;
        
        // 1. Analysis Pass
        std::cout << "// Analyzing basic blocks..." << std::endl;
        std::vector<basic_block> blocks = collect_basic_blocks(insn, count);
        std::cout << "// Found " << blocks.size() << " basic blocks." << std::endl;

        // 2. Generation Pass
        std::cout << "// Generating C++ code..." << std::endl;
        std::ofstream outFile("recomp_code.cpp");
        if (!outFile) {
            std::cerr << "Error: Could not open recomp_code.cpp for writing" << std::endl;
            return 1;
        }
        
        outFile << "// Code generated by CrashRecomp\n";
        outFile << "#include \"../../host_app/cpu_state.h\"\n\n";
        outFile << "extern CPUState context;\n\n";

        generate_functions_from_block(blocks, outFile);
        
        outFile.close();
        std::cout << "Successfully generated recompiled_code.cpp" << std::endl;

    } else {
        std::cerr << "ERROR: Failed to disassemble any code!" << std::endl;
    }

    cs_free(insn, count);
    cs_close(&handle);
    return 0;
}